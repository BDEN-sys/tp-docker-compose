services:
  traefik:
    image: traefik:v2.9.6
    ports:
    - "80:80"
    - "8080:8080"
    networks:
      - front-tier
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    command:
      # - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"

  vote:
     image: docker.io/bdensys/vote-prod:latest
     depends_on:
      redis:
        condition: service_healthy
     volumes:
       - "./vote:/app"
     networks:
      - front-tier
      - back-tier
  
  vote-ui:
     image: docker.io/bdensys/vote-ui-prod:latest
     depends_on:
      vote:
        condition: service_started
     labels:
      - "traefik.enable=true"
      - "traefik.http.routers.voteui.rule=Host(`vote.traefik.me`)"
      - "traefik.http.routers.voteui.entrypoints=web"
      - "traefik.http.services.voteui.loadbalancer.server.port=80"
     #Port 5000 sur hôte inutile non utile à priori car derrière proxy
     #ports:
     #  - "5000:80"
     expose: 
      - 80
     networks:
      - front-tier
     volumes:
      - ./vote-ui:/usr/share/nginx/html
     restart: unless-stopped
    
  result:
     image: docker.io/bdensys/result-prod:latest
     depends_on:
      db:
        condition: service_healthy
     volumes:
      - ./result:/app
     networks:
      - front-tier
      - back-tier
 
  result-ui:
     image: docker.io/bdensys/result-ui-prod:latest
     depends_on:
      db:
        condition: service_started
     labels:
      - "traefik.enable=true"
      - "traefik.http.routers.resultui.rule=Host(`result.traefik.me`)"
      - "traefik.http.routers.resultui.entrypoints=web"
      - "traefik.http.services.resultui.loadbalancer.server.port=80"
     volumes:
      - ./result-ui/src:/app/src
     restart: unless-stopped
     #ports:
     #  - "5001:80"
     expose: 
      - 80
     networks:
      - front-tier

  worker:
     image: docker.io/bdensys/worker-prod:latest
     networks:
      - back-tier
     depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
  
  redis:
     image: redis:7.0.5-alpine3.16
     #ports :
     # - "6379:6389"
     expose:
        - 6379
     networks:
      - back-tier
     healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: "5s"
  
  db:
      image: postgres:15-alpine3.16
      #ports:
      #  - "5432:5432"
      expose:
        - 5432
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      healthcheck:
        test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
        interval: "5s"
      volumes:
          - dbdata:/var/lib/postgresql/data 
      networks:
       - front-tier
       - back-tier

networks:
  front-tier:
  back-tier:

volumes:
  dbdata:
  